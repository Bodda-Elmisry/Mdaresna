// <auto-generated />
using System;
using Mdaresna.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Mdaresna.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250419210037_AddSoftDeleteToDatabase")]
    partial class AddSoftDeleteToDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mdaresna.Doamin.Models.AdminManagement.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ff35951-0ad2-46c7-83a5-f4487365ec1c"),
                            CreateDate = new DateTime(2024, 6, 4, 23, 0, 54, 602, DateTimeKind.Local),
                            Deleted = false,
                            Description = "For arabic class rooms",
                            LastModifyDate = new DateTime(2024, 6, 4, 23, 0, 54, 602, DateTimeKind.Local),
                            Name = "Arabic"
                        },
                        new
                        {
                            Id = new Guid("42f73d52-5e31-485a-8f5b-6f53670447ca"),
                            CreateDate = new DateTime(2024, 6, 4, 23, 0, 54, 602, DateTimeKind.Local),
                            Deleted = false,
                            Description = "For english class rooms",
                            LastModifyDate = new DateTime(2024, 6, 4, 23, 0, 54, 602, DateTimeKind.Local),
                            Name = "English"
                        });
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.CoinsManagement.CoinType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("CoinsTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa619624-c134-4e20-867b-e635a5a3b609"),
                            Deleted = false,
                            Name = "Standerd",
                            Value = 1m
                        });
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.CoinsManagement.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CoinTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("FromId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PaymentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SchoolRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoinTypeId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SchoolRequestId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.CoinsManagement.PaymentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.CoinsManagement.SchoolPaymentRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Approvied")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ApproviedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PaymentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TransfareAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransfareCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransfareDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApproviedById");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolPaymentRequests");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.Identity.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowedToMapToClassroom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("AppPermission")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("SchoolPermission")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0225dbd5-9675-438c-87f2-63fb6921841c"),
                            AllowedToMapToClassroom = false,
                            AppPermission = true,
                            Deleted = false,
                            Description = "Assign School Manager Permission To User",
                            Key = "AssignScoolManagerToUser",
                            Name = "Assign Scool Manager To User",
                            SchoolPermission = false
                        },
                        new
                        {
                            Id = new Guid("9301fc37-ae75-4ef6-b6fa-a656452e5a2e"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Create new shool",
                            Key = "CreateSchool",
                            Name = "Add School",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("b15e32eb-092e-437d-9d4e-b9ed583c23b0"),
                            AllowedToMapToClassroom = false,
                            AppPermission = true,
                            Deleted = false,
                            Description = "View User Schools Drop Down",
                            Key = "ViewUserSchoolsDropDown",
                            Name = "View User Schools Drop Down",
                            SchoolPermission = false
                        },
                        new
                        {
                            Id = new Guid("97aad235-16fa-496b-88d2-adceefbd8d5c"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "school Admin",
                            Key = "schoolAdmin",
                            Name = "school Admin",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("8ad5e47c-5ec4-49c7-a0ab-0d37e576961f"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View Year Setting Section",
                            Key = "ViewYearSettingSection",
                            Name = "View Year Setting Section",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("1dfbdb17-ba97-4539-b887-e81fc0e72b47"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View School Setting Section",
                            Key = "ViewSchoolSettingSection",
                            Name = "View School Setting Section",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("893e8a43-0da7-4149-abdb-e2469239896f"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View Classes Setting Section",
                            Key = "ViewClassesSettingSection",
                            Name = "View Classes Setting Section",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("4838711a-4139-465e-a34f-a4b6756ae475"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View Years Setting",
                            Key = "ViewYearsSetting",
                            Name = "View Years Setting",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("072c7a82-b62d-45d8-a3ed-48a70319abf3"),
                            AllowedToMapToClassroom = false,
                            AppPermission = true,
                            Deleted = false,
                            Description = "Change School Activation",
                            Key = "ChangeSchoolActivation",
                            Name = "Change School Activation",
                            SchoolPermission = false
                        },
                        new
                        {
                            Id = new Guid("fdebaade-4d2c-447b-ba52-11e3e2a622f4"),
                            AllowedToMapToClassroom = false,
                            AppPermission = true,
                            Deleted = false,
                            Description = "Filter Schools By Activity",
                            Key = "FilterSchoolsByActivity",
                            Name = "Filter Schools By Activity",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("8a48610d-c9ff-4fce-95eb-3a4d8d633a9c"),
                            AllowedToMapToClassroom = false,
                            AppPermission = true,
                            Deleted = false,
                            Description = "Assign Coins To School",
                            Key = "AssignCoinsToSchool",
                            Name = "Assign Coins To School",
                            SchoolPermission = false
                        },
                        new
                        {
                            Id = new Guid("122d8e7a-f5a7-48ea-b2a6-f86964a2c3e7"),
                            AllowedToMapToClassroom = false,
                            AppPermission = true,
                            Deleted = false,
                            Description = "Change School Type",
                            Key = "ChangeSchoolType",
                            Name = "Change School Type",
                            SchoolPermission = false
                        },
                        new
                        {
                            Id = new Guid("76befb0e-5ef7-4fe3-8e06-02d50c17c38b"),
                            AllowedToMapToClassroom = false,
                            AppPermission = true,
                            Deleted = false,
                            Description = "Change School Coin Type",
                            Key = "ChangeSchoolCoinType",
                            Name = "Change School Coin Type",
                            SchoolPermission = false
                        },
                        new
                        {
                            Id = new Guid("e50a5830-e741-4260-820c-19c2cab1b419"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View School Data",
                            Key = "ViewSchoolData",
                            Name = "View School Data",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("21040e37-d949-42ea-9a77-96aed0289209"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Update School Data",
                            Key = "UpdateSchoolData",
                            Name = "Update School Data",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("b7f4d3f3-b0b9-4e2f-8884-e2d61e0b6f5e"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Uploade School Image",
                            Key = "UploadeSchoolImage",
                            Name = "Uploade School Image",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("26de4395-48fb-4684-b88d-5c9e6081f9ac"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Add School Contact",
                            Key = "AddSchoolContact",
                            Name = "Add School Contact",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("16983650-564e-4331-97d2-c1b5d67fef40"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Update School Contact",
                            Key = "UpdateSchoolContact",
                            Name = "Update School Contact",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("d512c1b3-dde0-4646-98cc-2be5c56c7150"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View Shool Languages Setting",
                            Key = "ViewSchoolLanguagesSetting",
                            Name = "View School Languages Setting",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("be86c901-37f9-4f63-b7b3-03653e75fea5"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Add Language To School",
                            Key = "AddLanguageToSchool",
                            Name = "Add Language To School",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("71b6f158-82f2-4a48-9950-56dbb00eec4e"),
                            AllowedToMapToClassroom = false,
                            AppPermission = true,
                            Deleted = false,
                            Description = "View Languages",
                            Key = "ViewLanguages",
                            Name = "View Languages",
                            SchoolPermission = false
                        },
                        new
                        {
                            Id = new Guid("68713df9-ed1b-449c-8060-d919a2592b02"),
                            AllowedToMapToClassroom = false,
                            AppPermission = true,
                            Deleted = false,
                            Description = "Create Language",
                            Key = "CreateLanguage",
                            Name = "Create Language",
                            SchoolPermission = false
                        },
                        new
                        {
                            Id = new Guid("75162229-2536-4232-b081-feabe20c318d"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View Grades Setting",
                            Key = "ViewGradesSetting",
                            Name = "View Grades Setting",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("5c8d7610-bfaa-4deb-bd84-e54ed4351611"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Add Grade",
                            Key = "AddGrade",
                            Name = "Add Grade",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("0d9bfad2-0762-47ba-8046-3aa92b2d6222"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Add Multiple Grades",
                            Key = "AddMultipleGrades",
                            Name = "Add Multiple Grades",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("a1134102-7021-4770-8808-fdc376190691"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Update Grade",
                            Key = "UpdateGrade",
                            Name = "Update Grade",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("494d9c56-558a-427c-9854-878520fcdec8"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View Exams Setting",
                            Key = "ViewExamsSetting",
                            Name = "View Exams Setting",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("861ad498-a214-4b7d-bde7-815abf63a587"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Add Exam",
                            Key = "AddExam",
                            Name = "Add Exam",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("062ff041-c775-4b30-8a49-202db7d9dd28"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Add Multiple Exams",
                            Key = "AddMultipleExams",
                            Name = "Add Multiple Exams",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("e5b8454f-a193-4d63-b791-3a02aa9d71d3"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View Classes Setting Section",
                            Key = "ViewClassesSettingSection",
                            Name = "View Classes Setting Section",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("056ed8bb-3ffc-459f-831e-c8a462db313b"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View Classes Setting List",
                            Key = "ViewClassesSettingList",
                            Name = "View Classes Setting List",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("cb37bbd0-40ad-4ca8-ae19-1ed87fea0b97"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Add Class",
                            Key = "AddClass",
                            Name = "Add Class",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("84956c26-e46f-432a-9b44-c8fb17e95552"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Add Multiple Classes",
                            Key = "AddMultipleClasses",
                            Name = "Add Multiple Classes",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("f19ccd22-35ac-4778-8a7f-fb0e56822385"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Change Class Activation",
                            Key = "ChangeClassActivation",
                            Name = "Change Class Activation",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("7a382b52-95f3-442f-abff-9c1c5c9607cc"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Update Class",
                            Key = "UpdateClass",
                            Name = "Update Class",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("b6858fe8-dcc3-4c0f-b1a9-6a8ab7331924"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Link Teacher To School",
                            Key = "LinkTeacherToSchool",
                            Name = "Link Teacher To School",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("dd0f56ad-6039-4a8b-9d26-ebd5abe87e7d"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Add Course",
                            Key = "AddCourse",
                            Name = "Add Course",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("6ed86695-9ea7-4820-bf89-0de16dfd6ea9"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Add Multiple Courses",
                            Key = "AddMultipleCourses",
                            Name = "Add Multiple Courses",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("a4a93ceb-21f9-4400-9444-0d94cf895beb"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Update Course",
                            Key = "UpdateCourse",
                            Name = "Update Course",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("7b4478c8-2526-493a-a34d-9fffa5786f85"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View Teachers List",
                            Key = "ViewTeachersList",
                            Name = "View Teachers List",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("6de52188-1c80-46e3-a436-ff36469e2976"),
                            AllowedToMapToClassroom = false,
                            AppPermission = true,
                            Deleted = false,
                            Description = "View Admin Aettings",
                            Key = "ViewAdminSettings",
                            Name = "View Admin Aettings",
                            SchoolPermission = false
                        },
                        new
                        {
                            Id = new Guid("fe286e0a-193b-4f12-ae88-df5808fb2eb7"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Unlink Teacher To School",
                            Key = "UnlinkTeacherToSchool",
                            Name = "Unlink Teacher To School",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("98d37ade-fdc0-4a0b-8e00-402a708c9ddd"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Link Teacher To Course & Class",
                            Key = "LinkTeacherToCourse&Class",
                            Name = "Link Teacher To Course & Class",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("869a6521-2730-4f0b-973b-60fb8093c769"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Unlink Teacher To Course & Class",
                            Key = "UnlinkTeacherToCourse&Class",
                            Name = "Unlink Teacher To Course & Class",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("ee6325a4-4bc4-4aa7-9944-f82c3b7a305a"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View School Students List",
                            Key = "ViewSchoolStudentsList",
                            Name = "View School Students List",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("ad53e402-c2ab-4941-861b-a19c82dca0cc"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Assign Student To School",
                            Key = "AssignStudentToSchool",
                            Name = "Assign Student To School",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("b65324a3-35b9-4579-8c85-c9938391dfa6"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Assign Multiple Students To School",
                            Key = "AssignMultipleStudentsToSchool",
                            Name = "Assign Multiple Students To School",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("2f1290b1-f439-4810-ba25-5c3e9cc56efe"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Update Student Info",
                            Key = "UpdateStudentInfo",
                            Name = "Update Student Info",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("9dd22e15-9701-492b-ae20-985b8927f3bf"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Change Student Activation",
                            Key = "ChangeStudentActivation",
                            Name = "Change Student Activation",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("cc4a8f98-fbb7-49dd-8b5f-cc6d02bccab0"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View School Current Year",
                            Key = "ViewSchoolCurrentYear",
                            Name = "View School Current Year",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("c50d6574-648b-4f6e-8ed5-d27f8b5a34f1"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Add Current Year",
                            Key = "AddCurrentYear",
                            Name = "Add Current Year",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("32d821bb-0c50-4721-9034-097019632c05"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Add Month",
                            Key = "AddMonth",
                            Name = "Add Month",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("69a0778b-a7a8-4e47-b8fd-d061428dbb95"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View Year Monthes",
                            Key = "ViewYearMonthes",
                            Name = "View Year Monthes",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("d9b2c724-c5cc-497a-a11b-3e48b7dbfd97"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Update Year",
                            Key = "UpdateYear",
                            Name = "Update Year",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("93fd0aa6-852f-4afe-8cf4-9cdeb365d498"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Update Month",
                            Key = "UpdateMonth",
                            Name = "Update Month",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("b6d6c7e2-e2de-4b95-9789-a61c69f27765"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Change Year Activation",
                            Key = "ChangeYearActivation",
                            Name = "Change Year Activation",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("11f0aa92-e7af-4f94-bd50-96f389deee2a"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Change Month Activation",
                            Key = "ChangeMonthActivation",
                            Name = "Change Month Activation",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("ecd2236f-6fa1-43ec-92e9-aa36ae2358b4"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Complete Yeare",
                            Key = "CompleteYeare",
                            Name = "Complete Yeare",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("e831e41d-1090-4ad0-bbaf-e4ca823ecd9d"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View Years List",
                            Key = "ViewYearsList",
                            Name = "View Years List",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("219007ea-620e-4d96-8292-2d015ef68db1"),
                            AllowedToMapToClassroom = false,
                            AppPermission = true,
                            Deleted = false,
                            Description = "View Childerns List",
                            Key = "ViewChildernsList",
                            Name = "View Childerns",
                            SchoolPermission = false
                        },
                        new
                        {
                            Id = new Guid("3b49fc12-d345-41c4-b5d0-97a388aaafa3"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Attendance Action",
                            Key = "AttendanceAction",
                            Name = "Attendance Action",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("de53cf00-e53d-4be0-8f67-71f8c7248df4"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View Attendance List",
                            Key = "ViewAttendanceList",
                            Name = "View Attendance List",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("30aa5979-36f6-4a63-98d2-a06f96178176"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Add Homework",
                            Key = "AddHomework",
                            Name = "Add Homework",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("baa954fd-8ba9-4529-834d-e640057998af"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View Homework",
                            Key = "ViewHomework",
                            Name = "View Homework",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("65b57f13-161f-43b2-9e8d-daafb50fbbbb"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Update Homework",
                            Key = "UpdateHomework",
                            Name = "Update Homework",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("c1856505-7c6b-4932-8034-cf4fbc0efb67"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Rate Homework",
                            Key = "RateHomework",
                            Name = "Rate Homework",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("09e73f16-bb7a-403b-a8f9-fdc1c3228b0d"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View School Settings",
                            Key = "ViewSchoolSettings",
                            Name = "View School Settings",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("fba69a66-4e31-44f2-93ac-9602705a7f98"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View Exams",
                            Key = "ViewExams",
                            Name = "View Exams",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("77127635-8fe8-4451-ac9c-59c38ee02d4d"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Update Exam",
                            Key = "UpdateExam",
                            Name = "Update Exam",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("ebd73c8f-2ef9-4a67-99e6-bafe71c9e83c"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Rate Exam",
                            Key = "RateExam",
                            Name = "Rate Exam",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("49869e47-2209-4fd8-aa08-2e99ba211ff1"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View Activities",
                            Key = "ViewActivities",
                            Name = "View Activities",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("e09a3a9f-0ff1-46b7-8c80-b7f07ccb4542"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Add Activity",
                            Key = "AddActivity",
                            Name = "Add Activity",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("a992e74b-4ce4-4d18-bcc5-c079d116d1f5"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Update Activity",
                            Key = "UpdateActivity",
                            Name = "Update Activity",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("99fdfba4-ef5b-44d1-b9bf-b4faf68a7b60"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Rate Activity",
                            Key = "RateActivity",
                            Name = "Rate Activity",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("eec01fe0-4399-44b0-b8e7-afd417a6a93c"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Add Note",
                            Key = "AddNote",
                            Name = "Add Note",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("d9bdcf84-d193-4775-8f9b-bacb1bd22915"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "View Notes",
                            Key = "ViewNotes",
                            Name = "View Notes",
                            SchoolPermission = true
                        },
                        new
                        {
                            Id = new Guid("b7bcf498-f7e9-48b4-9e99-49f6d0a9a956"),
                            AllowedToMapToClassroom = false,
                            AppPermission = false,
                            Deleted = false,
                            Description = "Edit Note",
                            Key = "EditNote",
                            Name = "Edit Note",
                            SchoolPermission = true
                        });
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("AdminRole")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("SchoolRole")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("228ae7f5-c704-4660-aeb0-0e1f43112ae1"),
                            Active = true,
                            AdminRole = true,
                            Deleted = false,
                            Description = "This Role with fuly access to all Application featuers",
                            Name = "Application Manager",
                            SchoolRole = false
                        },
                        new
                        {
                            Id = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            Active = true,
                            AdminRole = false,
                            Deleted = false,
                            Description = "This Role with fuly access to all school featuers",
                            Name = "School Manager",
                            SchoolRole = true
                        },
                        new
                        {
                            Id = new Guid("10620c5f-37fe-4d18-996f-915ece8893f1"),
                            Active = true,
                            AdminRole = false,
                            Deleted = false,
                            Description = "",
                            Name = "School Teacher",
                            SchoolRole = true
                        },
                        new
                        {
                            Id = new Guid("92d00b28-9d25-4bd2-a587-6c22a3a07a92"),
                            Active = true,
                            AdminRole = true,
                            Deleted = false,
                            Description = "This Role to work in normal account and it's the default role for all accounts. \nWith this role you can track your souns activites and schools.",
                            Name = "Standerd",
                            SchoolRole = false
                        });
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.Identity.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("228ae7f5-c704-4660-aeb0-0e1f43112ae1"),
                            PermissionId = new Guid("76befb0e-5ef7-4fe3-8e06-02d50c17c38b"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("228ae7f5-c704-4660-aeb0-0e1f43112ae1"),
                            PermissionId = new Guid("fdebaade-4d2c-447b-ba52-11e3e2a622f4"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("228ae7f5-c704-4660-aeb0-0e1f43112ae1"),
                            PermissionId = new Guid("219007ea-620e-4d96-8292-2d015ef68db1"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("228ae7f5-c704-4660-aeb0-0e1f43112ae1"),
                            PermissionId = new Guid("8a48610d-c9ff-4fce-95eb-3a4d8d633a9c"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("228ae7f5-c704-4660-aeb0-0e1f43112ae1"),
                            PermissionId = new Guid("072c7a82-b62d-45d8-a3ed-48a70319abf3"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("228ae7f5-c704-4660-aeb0-0e1f43112ae1"),
                            PermissionId = new Guid("71b6f158-82f2-4a48-9950-56dbb00eec4e"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("228ae7f5-c704-4660-aeb0-0e1f43112ae1"),
                            PermissionId = new Guid("0225dbd5-9675-438c-87f2-63fb6921841c"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("228ae7f5-c704-4660-aeb0-0e1f43112ae1"),
                            PermissionId = new Guid("68713df9-ed1b-449c-8060-d919a2592b02"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("228ae7f5-c704-4660-aeb0-0e1f43112ae1"),
                            PermissionId = new Guid("122d8e7a-f5a7-48ea-b2a6-f86964a2c3e7"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("92d00b28-9d25-4bd2-a587-6c22a3a07a92"),
                            PermissionId = new Guid("219007ea-620e-4d96-8292-2d015ef68db1"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("be86c901-37f9-4f63-b7b3-03653e75fea5"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("69a0778b-a7a8-4e47-b8fd-d061428dbb95"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("b15e32eb-092e-437d-9d4e-b9ed583c23b0"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("32d821bb-0c50-4721-9034-097019632c05"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("a4a93ceb-21f9-4400-9444-0d94cf895beb"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("6ed86695-9ea7-4820-bf89-0de16dfd6ea9"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("fdebaade-4d2c-447b-ba52-11e3e2a622f4"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("e50a5830-e741-4260-820c-19c2cab1b419"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("cb37bbd0-40ad-4ca8-ae19-1ed87fea0b97"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("062ff041-c775-4b30-8a49-202db7d9dd28"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("d512c1b3-dde0-4646-98cc-2be5c56c7150"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("49869e47-2209-4fd8-aa08-2e99ba211ff1"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("e5b8454f-a193-4d63-b791-3a02aa9d71d3"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("0d9bfad2-0762-47ba-8046-3aa92b2d6222"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("d9b2c724-c5cc-497a-a11b-3e48b7dbfd97"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("98d37ade-fdc0-4a0b-8e00-402a708c9ddd"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("b7bcf498-f7e9-48b4-9e99-49f6d0a9a956"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("77127635-8fe8-4451-ac9c-59c38ee02d4d"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("2f1290b1-f439-4810-ba25-5c3e9cc56efe"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("26de4395-48fb-4684-b88d-5c9e6081f9ac"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("869a6521-2730-4f0b-973b-60fb8093c769"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("b6858fe8-dcc3-4c0f-b1a9-6a8ab7331924"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("de53cf00-e53d-4be0-8f67-71f8c7248df4"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("861ad498-a214-4b7d-bde7-815abf63a587"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("494d9c56-558a-427c-9854-878520fcdec8"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("fba69a66-4e31-44f2-93ac-9602705a7f98"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("21040e37-d949-42ea-9a77-96aed0289209"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("11f0aa92-e7af-4f94-bd50-96f389deee2a"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("3b49fc12-d345-41c4-b5d0-97a388aaafa3"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("9dd22e15-9701-492b-ae20-985b8927f3bf"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("7a382b52-95f3-442f-abff-9c1c5c9607cc"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("93fd0aa6-852f-4afe-8cf4-9cdeb365d498"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("7b4478c8-2526-493a-a34d-9fffa5786f85"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("30aa5979-36f6-4a63-98d2-a06f96178176"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("ad53e402-c2ab-4941-861b-a19c82dca0cc"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("b6d6c7e2-e2de-4b95-9789-a61c69f27765"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("9301fc37-ae75-4ef6-b6fa-a656452e5a2e"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("ecd2236f-6fa1-43ec-92e9-aa36ae2358b4"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("eec01fe0-4399-44b0-b8e7-afd417a6a93c"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("99fdfba4-ef5b-44d1-b9bf-b4faf68a7b60"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("e09a3a9f-0ff1-46b7-8c80-b7f07ccb4542"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("d9bdcf84-d193-4775-8f9b-bacb1bd22915"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("ebd73c8f-2ef9-4a67-99e6-bafe71c9e83c"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("a992e74b-4ce4-4d18-bcc5-c079d116d1f5"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("16983650-564e-4331-97d2-c1b5d67fef40"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("056ed8bb-3ffc-459f-831e-c8a462db313b"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("84956c26-e46f-432a-9b44-c8fb17e95552"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("b65324a3-35b9-4579-8c85-c9938391dfa6"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("cc4a8f98-fbb7-49dd-8b5f-cc6d02bccab0"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("c1856505-7c6b-4932-8034-cf4fbc0efb67"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("c50d6574-648b-4f6e-8ed5-d27f8b5a34f1"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("65b57f13-161f-43b2-9e8d-daafb50fbbbb"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("fe286e0a-193b-4f12-ae88-df5808fb2eb7"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("b7f4d3f3-b0b9-4e2f-8884-e2d61e0b6f5e"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("e831e41d-1090-4ad0-bbaf-e4ca823ecd9d"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("5c8d7610-bfaa-4deb-bd84-e54ed4351611"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("baa954fd-8ba9-4529-834d-e640057998af"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("dd0f56ad-6039-4a8b-9d26-ebd5abe87e7d"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("ee6325a4-4bc4-4aa7-9944-f82c3b7a305a"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("f19ccd22-35ac-4778-8a7f-fb0e56822385"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("09e73f16-bb7a-403b-a8f9-fdc1c3228b0d"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("a1134102-7021-4770-8808-fdc376190691"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("75162229-2536-4232-b081-feabe20c318d"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("6de52188-1c80-46e3-a436-ff36469e2976"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("4838711a-4139-465e-a34f-a4b6756ae475"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("893e8a43-0da7-4149-abdb-e2469239896f"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("1dfbdb17-ba97-4539-b887-e81fc0e72b47"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("8ad5e47c-5ec4-49c7-a0ab-0d37e576961f"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            PermissionId = new Guid("97aad235-16fa-496b-88d2-adceefbd8d5c"),
                            Deleted = false
                        },
                        new
                        {
                            RoleId = new Guid("10620c5f-37fe-4d18-996f-915ece8893f1"),
                            PermissionId = new Guid("b15e32eb-092e-437d-9d4e-b9ed583c23b0"),
                            Deleted = false
                        });
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.Identity.UserPermission", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "PermissionId", "SchoolId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("SchoolId");

                    b.ToTable("userPermissions");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.Identity.UserPermissionSchoolClassRoom", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "PermissionId", "ClassRoomId");

                    b.HasIndex("PermissionId");

                    b.ToTable("userPermissionSchoolClassRooms");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.Identity.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SchoolId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("de36f342-fe3c-46c3-bdfc-bb3fcf2ec7e4"),
                            RoleId = new Guid("228ae7f5-c704-4660-aeb0-0e1f43112ae1"),
                            Deleted = false
                        },
                        new
                        {
                            UserId = new Guid("de36f342-fe3c-46c3-bdfc-bb3fcf2ec7e4"),
                            RoleId = new Guid("92d00b28-9d25-4bd2-a587-6c22a3a07a92"),
                            Deleted = false
                        },
                        new
                        {
                            UserId = new Guid("d4c7be15-c9b6-4d83-8516-aff52c94f963"),
                            RoleId = new Guid("4b8a99fe-b759-4c18-9500-8052c3d7ac73"),
                            Deleted = false
                        },
                        new
                        {
                            UserId = new Guid("d4c7be15-c9b6-4d83-8516-aff52c94f963"),
                            RoleId = new Guid("92d00b28-9d25-4bd2-a587-6c22a3a07a92"),
                            Deleted = false
                        });
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3);

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupervisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WCSUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("maxOfStudents")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("ClassRooms");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoomActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ClassRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SupervisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WeekDay")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("ClassRoomActivities");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoomAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ClassRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SupervisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WeekDay")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("ClassRoomAssignments");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoomExam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MonthId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SupervisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WeekDay")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("CourseId");

                    b.HasIndex("MonthId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("ClassRoomExams");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoomTeacherCourse", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TeacherId", "CourseId", "ClassRoomId");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("CourseId");

                    b.ToTable("ClassRoomTeacherCourses");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassroomEmployee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeId", "ClassRoomId");

                    b.HasIndex("ClassRoomId");

                    b.ToTable("ClassroomEmployees");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.ClassRoomLanguage", b =>
                {
                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SchoolId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("ClassRoomLanguages");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AvailableCoins")
                        .HasColumnType("int");

                    b.Property<Guid?>("CoinTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("SchoolAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SchoolTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Vesion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoinTypeId");

                    b.HasIndex("SchoolAdminId");

                    b.HasIndex("SchoolTypeId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3338e17d-280f-467f-938a-5629415b6e52"),
                            About = "",
                            Active = true,
                            AvailableCoins = 100,
                            CoinTypeId = new Guid("aa619624-c134-4e20-867b-e635a5a3b609"),
                            CreateDate = new DateTime(2024, 9, 27, 21, 6, 0, 252, DateTimeKind.Unspecified).AddTicks(9751),
                            Deleted = false,
                            ImageUrl = "",
                            LastModifyDate = new DateTime(2024, 9, 27, 21, 6, 0, 252, DateTimeKind.Unspecified).AddTicks(9751),
                            Name = "Demo School",
                            SchoolAdminId = new Guid("d4c7be15-c9b6-4d83-8516-aff52c94f963"),
                            SchoolTypeId = new Guid("04d490ad-0994-404e-9d8b-8ecf504811f3"),
                            Vesion = ""
                        });
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolContacts");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolContactType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("SchoolContactTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5160b1a7-b5ff-4807-a3e0-94fd99579407"),
                            Deleted = false,
                            Name = "Email"
                        },
                        new
                        {
                            Id = new Guid("04415888-fe5c-4c91-a8aa-b6a8d1383c08"),
                            Deleted = false,
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("7b962cc1-db7b-489f-b75e-a478fb932e00"),
                            Deleted = false,
                            Name = "Phone"
                        },
                        new
                        {
                            Id = new Guid("a3fdcfa4-0c57-416b-91a9-51e8601e7d0c"),
                            Deleted = false,
                            Name = "Fax"
                        },
                        new
                        {
                            Id = new Guid("3851e877-81ec-4e74-a9ee-ab29265e873f"),
                            Deleted = false,
                            Name = "Address"
                        });
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolCourses");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolEmployee", b =>
                {
                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SchoolId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SchoolEmployees");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolExamRateHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolExamRateHeaders");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolGrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolGrades");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PosterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PosterId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolPosts");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolPostImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("SchoolPostImages");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolTeacher", b =>
                {
                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SchoolId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("schoolTeachers");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolTeacherCourse", b =>
                {
                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SchoolId", "TeacherId", "CourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("schoolTeacherCourses");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("SchoolTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04d490ad-0994-404e-9d8b-8ecf504811f3"),
                            Deleted = false,
                            Description = "Standerd Schools",
                            Name = "Standerd"
                        });
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolYear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Compleated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolYears");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolYearMonth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("YearId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("SchoolYearMonths");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.ClassRoomStudentActivity", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsAttend")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Result")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StudentId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ClassRoomStudentActivities");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.ClassRoomStudentAssignment", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Result")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StudentId", "AssignmentId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("ClassRoomStudentAssignments");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.ClassRoomStudentExam", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsAttend")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TotalResult")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StudentId", "ExamId");

                    b.HasIndex("ExamId");

                    b.ToTable("ClassRoomStudentExams");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ClassRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MiddelName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.StudentAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsAttend")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupervisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WeekDay")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("StudentAttendances");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.StudentExamRate", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RateHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Result")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StudentId", "ExamId", "RateHeaderId");

                    b.HasIndex("ExamId");

                    b.HasIndex("RateHeaderId");

                    b.ToTable("studentExamRates");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.StudentNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupervisorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("studentNotes");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.StudentParent", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RelationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentId", "ParentId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RelationId");

                    b.ToTable("StudentParents");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SettingsManagement.EmailProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("ClientPort")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EmailDomain")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Periority")
                        .HasColumnType("int");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SenderPassword")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SmtpClient")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("EmailProviders");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SettingsManagement.SMSProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("APIUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MessageCharactersLength")
                        .HasColumnType("int");

                    b.Property<string>("ProviderPassword")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("ProviderPeriority")
                        .HasColumnType("int");

                    b.Property<string>("ProviderUserName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("SMSProviders");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.UserManagement.RelationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("relationTypes");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.UserManagement.SchoolUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "SchoolId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolUsers");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.UserManagement.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Contry")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailConfirmationKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailConfirmtionKey")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EncriptionKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MiddelName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("PhoneConfirmationCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Region")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de36f342-fe3c-46c3-bdfc-bb3fcf2ec7e4"),
                            CreateDate = new DateTime(2024, 9, 27, 21, 6, 0, 252, DateTimeKind.Unspecified).AddTicks(9751),
                            Deleted = false,
                            EmailConfirmed = false,
                            EncriptionKey = "UMvC6sSFY2ujmzh6A1aaK3QHEBS00QUa",
                            FirstName = "Ali",
                            ImageUrl = "",
                            LastModifyDate = new DateTime(2024, 9, 27, 21, 6, 0, 252, DateTimeKind.Unspecified).AddTicks(9751),
                            LastName = "Fath",
                            Password = "gNL9jSV6CPO827CIcQlRcgFHuqH5gmfAfn95jWLI9ec=",
                            PhoneConfirmed = true,
                            PhoneNumber = "01210199123",
                            UserName = "AliFath",
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("d4c7be15-c9b6-4d83-8516-aff52c94f963"),
                            CreateDate = new DateTime(2024, 9, 27, 21, 6, 0, 252, DateTimeKind.Unspecified).AddTicks(9751),
                            Deleted = false,
                            EmailConfirmed = false,
                            EncriptionKey = "S4qu2kt4eTBicZKp5inKySLYhcvTZUfu",
                            FirstName = "Ali",
                            ImageUrl = "",
                            LastModifyDate = new DateTime(2024, 9, 27, 21, 6, 0, 252, DateTimeKind.Unspecified).AddTicks(9751),
                            LastName = "Fath",
                            Password = "JA848ibn1deWJVFuHcsLXx7Bxo4NBelM0gF2tu9nwGI=",
                            PhoneConfirmed = true,
                            PhoneNumber = "01288826193",
                            UserName = "Ali",
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.CoinsManagement.PaymentTransaction", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.CoinsManagement.CoinType", "CoinType")
                        .WithMany()
                        .HasForeignKey("CoinTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.CoinsManagement.PaymentType", "paymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.CoinsManagement.SchoolPaymentRequest", "SchoolPaymentRequest")
                        .WithMany()
                        .HasForeignKey("SchoolRequestId");

                    b.Navigation("CoinType");

                    b.Navigation("SchoolPaymentRequest");

                    b.Navigation("paymentType");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.CoinsManagement.SchoolPaymentRequest", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "ApproviedBy")
                        .WithMany()
                        .HasForeignKey("ApproviedById");

                    b.HasOne("Mdaresna.Doamin.Models.CoinsManagement.PaymentType", "paymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApproviedBy");

                    b.Navigation("School");

                    b.Navigation("paymentType");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.Identity.RolePermission", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.Identity.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.Identity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.Identity.UserPermission", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.Identity.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.Identity.UserPermissionSchoolClassRoom", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.Identity.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.Identity.UserRole", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.Identity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoom", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolGrade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.AdminManagement.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Language");

                    b.Navigation("School");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoomActivity", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoom", "ClassRoom")
                        .WithMany()
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolCourse", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassRoom");

                    b.Navigation("Course");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoomAssignment", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoom", "ClassRoom")
                        .WithMany()
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolCourse", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassRoom");

                    b.Navigation("Course");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoomExam", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoom", "ClassRoom")
                        .WithMany()
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolCourse", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolYearMonth", "Month")
                        .WithMany()
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassRoom");

                    b.Navigation("Course");

                    b.Navigation("Month");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoomTeacherCourse", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoom", "ClassRoom")
                        .WithMany()
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolCourse", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassRoom");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassroomEmployee", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoom", "ClassRoom")
                        .WithMany()
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassRoom");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.ClassRoomLanguage", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.AdminManagement.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.CoinsManagement.CoinType", "CoinType")
                        .WithMany()
                        .HasForeignKey("CoinTypeId");

                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "SchoolAdmin")
                        .WithMany()
                        .HasForeignKey("SchoolAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolType", "SchoolType")
                        .WithMany()
                        .HasForeignKey("SchoolTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoinType");

                    b.Navigation("SchoolAdmin");

                    b.Navigation("SchoolType");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolContact", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContactType");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolCourse", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.AdminManagement.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolEmployee", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolExamRateHeader", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolGrade", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolPost", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "Poster")
                        .WithMany()
                        .HasForeignKey("PosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Poster");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolPostImage", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolPost", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolTeacher", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolTeacherCourse", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolCourse", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolYear", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolYearMonth", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolYear", "Year")
                        .WithMany()
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.ClassRoomStudentActivity", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoomActivity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.ClassRoomStudentAssignment", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoomAssignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.ClassRoomStudentExam", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoomExam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.Student", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoom", "ClassRoom")
                        .WithMany()
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassRoom");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.StudentAttendance", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoom", "ClassRoom")
                        .WithMany()
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassRoom");

                    b.Navigation("Student");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.StudentExamRate", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoomExam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolExamRateHeader", "RateHeader")
                        .WithMany()
                        .HasForeignKey("RateHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("RateHeader");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.StudentNote", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.ClassRoomManagement.ClassRoom", "ClassRoom")
                        .WithMany()
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.SchoolCourse", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassRoom");

                    b.Navigation("Course");

                    b.Navigation("Student");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.StudentParent", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.RelationType", "Relation")
                        .WithMany()
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.StudentManagement.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Relation");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Mdaresna.Doamin.Models.UserManagement.SchoolUser", b =>
                {
                    b.HasOne("Mdaresna.Doamin.Models.SchoolManagement.SchoolManagement.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mdaresna.Doamin.Models.UserManagement.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
